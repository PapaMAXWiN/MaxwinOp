# Copyright (C) 2021 VeezMusicProject

from asyncio import QueueEmpty

from pyrogram import Client, filters
from pyrogram.types import (
    CallbackQuery,
    ChatPermissions,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from callsmusic import callsmusic
from callsmusic.queues import queues
from config import BOT_USERNAME, COMMAND_PREFIXES, que
from cache.admins import admins
from handlers.play import cb_admin_check
from helpers.channelmusic import get_chat_id
from helpers.dbtools import delcmd_is_on, delcmd_off, delcmd_on, handle_user_status
from helpers.decorators import authorized_users_only, errors
from helpers.filters import command, other_filters
from helpers.helper_functions.admin_check import admin_check
from helpers.helper_functions.extract_user import extract_user
from helpers.helper_functions.string_handling import extract_time


@Client.on_message()
async def _(bot: Client, cmd: Message):
    await handle_user_status(bot, cmd)


# Back Button
BACK_BUTTON = InlineKeyboardMarkup(
    [[InlineKeyboardButton("üè° G·¥è B·¥Ä·¥Ñ·¥ã", callback_data="cbback")]]
)

# @Client.on_message(filters.text & ~filters.private)
# async def delcmd(_, message: Message):
#    if await delcmd_is_on(message.chat.id) and message.text.startswith("/") or message.text.startswith("!") or message.text.startswith("."):
#        await message.delete()
#    await message.continue_propagation()

# remove the ( # ) if you want the auto del cmd feature is on


@Client.on_message(command(["reload", f"reload@{BOT_USERNAME}"]) & other_filters)
async def update_admin(client, message):
    global admins
    new_admins = []
    new_ads = await client.get_chat_members(message.chat.id, filter="administrators")
    for u in new_ads:
        new_admins.append(u.user.id)
    admins[message.chat.id] = new_admins
    await message.reply_text(
        "‚úÖ B·¥è·¥õ **reloaded correctly !**\n‚úÖ **Admin list**  ú·¥Äs  ô·¥á·¥á…¥ **updated !**"
    )


# Control Menu Of Player
@Client.on_message(command(["control", f"control@{BOT_USERNAME}"]) & other_filters)
@errors
@authorized_users_only
async def controlset(_, message: Message):
    await message.reply_text(
        "**üí° O·¥ò·¥á…¥·¥á·¥Ö ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä ·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥ç·¥á…¥·¥ú!**\n\n**üí≠  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä ·¥ä·¥ús·¥õ  ô è ·¥ò Ä·¥áss…™…¥…¢ ·¥è…¥·¥á ·¥è“ì ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥°**",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚è∏", callback_data="cbpause"),
                    InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="cbresume"),
                ],
                [
                    InlineKeyboardButton("‚è©", callback_data="cbskip"),
                    InlineKeyboardButton("‚èπ", callback_data="cbend"),
                ],
                [InlineKeyboardButton("‚õî A…¥·¥õ…™-·¥Ñ·¥ç·¥Ö", callback_data="cbdelcmds")],
                [InlineKeyboardButton("üõÑ G Ä·¥è·¥ú·¥ò-·¥õ·¥è·¥è üs", callback_data="cbgtools")],
                [InlineKeyboardButton("üóë C ü·¥ès·¥á", callback_data="close")],
            ]
        ),
    )


@Client.on_message(command(["pause", f"pause@{BOT_USERNAME}"]) & other_filters)
@errors
@authorized_users_only
async def pause(_, message: Message):
    chat_id = get_chat_id(message.chat)
    if (chat_id not in callsmusic.pytgcalls.active_calls) or (
        callsmusic.pytgcalls.active_calls[chat_id] == "paused"
    ):
        await message.reply_text("‚ùå N·¥è ·¥ç·¥ús…™·¥Ñ …™s ·¥ò ü·¥Ä è…™…¥…¢ …™…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ.")
    else:
        callsmusic.pytgcalls.pause_stream(chat_id)
        await message.reply_text(
            "‚è∏ **T Ä·¥Ä·¥Ñ·¥ã ·¥ò·¥Ä·¥ús·¥á·¥Ö.**\n\n‚Ä¢ **T·¥è  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥ò ü·¥Ä è ô·¥Ä·¥Ñ·¥ã, ·¥ús·¥á ·¥õ ú·¥á** ¬ª `/resume` ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö."
        )


@Client.on_message(command(["resume", f"resume@{BOT_USERNAME}"]) & other_filters)
@errors
@authorized_users_only
async def resume(_, message: Message):
    chat_id = get_chat_id(message.chat)
    if (chat_id not in callsmusic.pytgcalls.active_calls) or (
        callsmusic.pytgcalls.active_calls[chat_id] == "playing"
    ):
        await message.reply_text("‚ùå N·¥è ·¥ç·¥ús…™·¥Ñ …™s ·¥ò·¥Ä·¥ús·¥á·¥Ö.")
    else:
        callsmusic.pytgcalls.resume_stream(chat_id)
        await message.reply_text(
            "‚ñ∂Ô∏è **T Ä·¥Ä·¥Ñ·¥ã  Ä·¥ás·¥ú·¥ç·¥á·¥Ö.**\n\n‚Ä¢ **T·¥è ·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥ò ü·¥Ä è ô·¥Ä·¥Ñ·¥ã, ·¥ús·¥á ·¥õ ú·¥á** ¬ª `/pause` ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö."
        )


@Client.on_message(command(["end", f"end@{BOT_USERNAME}"]) & other_filters)
@errors
@authorized_users_only
async def stop(_, message: Message):
    chat_id = get_chat_id(message.chat)
    if chat_id not in callsmusic.pytgcalls.active_calls:
        await message.reply_text("‚ùå N·¥è ·¥ç·¥ús…™·¥Ñ …™s ·¥ò ü·¥Ä è…™…¥…¢ …™…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ.")
    else:
        try:
            queues.clear(chat_id)
        except QueueEmpty:
            pass

        callsmusic.pytgcalls.leave_group_call(chat_id)
        await message.reply_text("‚úÖ **music playback has ended**")


@Client.on_message(command(["skip", f"skip@{BOT_USERNAME}"]) & other_filters)
@errors
@authorized_users_only
async def skip(_, message: Message):
    global que
    chat_id = get_chat_id(message.chat)
    if chat_id not in callsmusic.pytgcalls.active_calls:
        await message.reply_text("‚ùå N·¥è ·¥ç·¥ús…™·¥Ñ …™s ·¥ò ü·¥Ä è…™…¥…¢ …™…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ.")
    else:
        queues.task_done(chat_id)

        if queues.is_empty(chat_id):
            callsmusic.pytgcalls.leave_group_call(chat_id)
        else:
            callsmusic.pytgcalls.change_stream(chat_id, queues.get(chat_id)["file"])

    qeue = que.get(chat_id)
    if qeue:
        qeue.pop(0)
    if not qeue:
        return
    await message.reply_text("‚è≠ **Y·¥è·¥ú'·¥†·¥á s·¥ã…™·¥ò·¥ò·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á …¥·¥áx·¥õ s·¥è…¥…¢.**")


@Client.on_message(command(["auth", f"auth@{BOT_USERNAME}"]) & other_filters)
@authorized_users_only
async def authenticate(client, message):
    global admins
    if not message.reply_to_message:
        return await message.reply("üí° R·¥á·¥ò ü è ·¥õ·¥è ·¥ç·¥áss·¥Ä…¢s ·¥õ·¥è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á ·¥ús·¥á Ä !")
    if message.reply_to_message.from_user.id not in admins[message.chat.id]:
        new_admins = admins[message.chat.id]
        new_admins.append(message.reply_to_message.from_user.id)
        admins[message.chat.id] = new_admins
        await message.reply(
            "üü¢ ·¥ús·¥á ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.\n\nF Ä·¥è·¥ç …¥·¥è·¥° ·¥è…¥, ·¥õ ú·¥Ä·¥õ's ·¥ús·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á  ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös."
        )
    else:
        await message.reply("‚úÖ Us·¥á Ä ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö!")


@Client.on_message(command(["deauth", f"deauth@{BOT_USERNAME}"]) & other_filters)
@authorized_users_only
async def deautenticate(client, message):
    global admins
    if not message.reply_to_message:
        return await message.reply("üí° R·¥á·¥ò ü è ·¥õ·¥è ·¥ç·¥áss·¥Ä…¢s ·¥õ·¥è ·¥Ö·¥á·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á ·¥ús·¥á Ä !")
    if message.reply_to_message.from_user.id in admins[message.chat.id]:
        new_admins = admins[message.chat.id]
        new_admins.remove(message.reply_to_message.from_user.id)
        admins[message.chat.id] = new_admins
        await message.reply(
            "üî¥ Us·¥á Ä ·¥Ö·¥á·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö\n\nF Ä·¥è·¥ç …¥·¥è·¥° ·¥õ ú·¥Ä·¥õ's ·¥ús·¥á Ä ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ús ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös."
        )
    else:
        await message.reply("‚úÖ Us·¥á Ä ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö·¥á·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö!")


# this is a A…¥·¥õ…™-·¥Ñ·¥ç·¥Ö feature
@Client.on_message(command(["delcmd", f"delcmd@{BOT_USERNAME}"]) & other_filters)
@authorized_users_only
async def delcmdc(_, message: Message):
    if len(message.command) != 2:
        return await message.reply_text(
            "R·¥á·¥Ä·¥Ö ·¥õ ú·¥á /help ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ã…¥·¥è·¥°  ú·¥è·¥° ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö"
        )
    status = message.text.split(None, 1)[1].strip()
    status = status.lower()
    chat_id = message.chat.id
    if status == "on":
        if await delcmd_is_on(message.chat.id):
            return await message.reply_text("‚úÖ A·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö")
        await delcmd_on(chat_id)
        await message.reply_text("üü¢ A·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñsss“ì·¥ú ü ü è")
    elif status == "off":
        await delcmd_off(chat_id)
        await message.reply_text("üî¥ Disabled successfully")
    else:
        await message.reply_text(
            "R·¥á·¥Ä·¥Ö ·¥õ ú·¥á /help ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ã…¥·¥è·¥°  ú·¥è·¥° ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö"
        )


# music player callbacks (control by buttons feature)


@Client.on_callback_query(filters.regex("cbpause"))
@cb_admin_check
async def cbpause(_, query: CallbackQuery):
    get_chat_id(query.message.chat)
    if (query.message.chat.id not in callsmusic.pytgcalls.active_calls) or (
        callsmusic.pytgcalls.active_calls[query.message.chat.id] == "paused"
    ):
        await query.edit_message_text("‚ùå N·¥è ·¥ç·¥ús…™·¥Ñ …™s ·¥ò ü·¥Ä è…™…¥…¢ …™…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ", reply_markup=BACK_BUTTON)
    else:
        callsmusic.pytgcalls.pause_stream(query.message.chat.id)
        await query.edit_message_text(
            "‚è∏ M·¥ús…™·¥Ñ ·¥ò ü·¥Ä è ô·¥Ä·¥Ñ·¥ã  ú·¥Äs  ô·¥á·¥á…¥ ·¥ò·¥Ä·¥ús·¥á·¥Ö", reply_markup=BACK_BUTTON
        )


@Client.on_callback_query(filters.regex("cbresume"))
@cb_admin_check
async def cbresume(_, query: CallbackQuery):
    get_chat_id(query.message.chat)
    if (query.message.chat.id not in callsmusic.pytgcalls.active_calls) or (
        callsmusic.pytgcalls.active_calls[query.message.chat.id] == "resumed"
    ):
        await query.edit_message_text("‚ùå N·¥è ·¥ç·¥ús…™·¥Ñ …™s ·¥ò·¥Ä·¥ús·¥á·¥Ö", reply_markup=BACK_BUTTON)
    else:
        callsmusic.pytgcalls.resume_stream(query.message.chat.id)
        await query.edit_message_text(
            "‚ñ∂Ô∏è M·¥ús…™·¥Ñ ·¥ò ü·¥Ä è ô·¥Ä·¥Ñ·¥ã  ú·¥Äs  ô·¥á·¥á…¥  Ä·¥ás·¥ú·¥ç·¥á·¥Ö", reply_markup=BACK_BUTTON
        )


@Client.on_callback_query(filters.regex("cbend"))
@cb_admin_check
async def cbend(_, query: CallbackQuery):
    get_chat_id(query.message.chat)
    if query.message.chat.id not in callsmusic.pytgcalls.active_calls:
        await query.edit_message_text("‚ùå N·¥è ·¥ç·¥ús…™·¥Ñ …™s ·¥ò ü·¥Ä è…™…¥…¢ …™…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ", reply_markup=BACK_BUTTON)
    else:
        try:
            queues.clear(query.message.chat.id)
        except QueueEmpty:
            pass

        callsmusic.pytgcalls.leave_group_call(query.message.chat.id)
        await query.edit_message_text(
            "‚úÖ T ú·¥á ·¥ç·¥ús…™·¥Ñ «´·¥ú·¥á·¥ú·¥á  ú·¥Äs  ô·¥á·¥á…¥…¥ ·¥Ñ ü·¥á·¥Ä Ä·¥á·¥Ö ·¥Ä…¥·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ü·¥á“ì·¥õ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ",
            reply_markup=BACK_BUTTON,
        )


@Client.on_callback_query(filters.regex("cbskip"))
@cb_admin_check
async def cbskip(_, query: CallbackQuery):
    global que
    chat_id = get_chat_id(query.message.chat)
    if query.message.chat.id not in callsmusic.pytgcalls.active_calls:
        await query.edit_message_text("‚ùå N·¥è ·¥ç·¥ús…™·¥Ñ …™s ·¥ò ü·¥Ä è…™…¥…¢ …™…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ", reply_markup=BACK_BUTTON)
    else:
        queues.task_done(query.message.chat.id)

        if queues.is_empty(query.message.chat.id):
            callsmusic.pytgcalls.leave_group_call(query.message.chat.id)
        else:
            callsmusic.pytgcalls.change_stream(
                query.message.chat.id, queues.get(query.message.chat.id)["file"]
            )

    qeue = que.get(chat_id)
    if qeue:
        qeue.pop(0)
    if not qeue:
        return
    await query.edit_message_text(
        "‚è≠ **Y·¥è·¥ú'·¥†·¥á s·¥ã…™·¥ò·¥ò·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á …¥·¥áx·¥õ s·¥è…¥…¢**", reply_markup=BACK_BUTTON
    )


# (C) Veez Music Project

# ban & unban function


@Client.on_message(filters.command("b", COMMAND_PREFIXES))
@authorized_users_only
async def ban_user(_, message):
    is_admin = await admin_check(message)
    if not is_admin:
        return

    user_id, user_first_name = extract_user(message)

    try:
        await message.chat.kick_member(user_id=user_id)
    except Exception as error:
        await message.reply_text(str(error))
    else:
        if str(user_id).lower().startswith("@"):
            await message.reply_text(
                "‚úÖ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö" f"{user_first_name}" " “ì·¥è Ä·¥ç ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò !"
            )
        else:
            await message.reply_text(
                "‚úÖ  ô·¥Ä…¥…¥·¥á·¥Ö "
                f"<a href='tg://user?id={user_id}'>"
                f"{user_first_name}"
                "</a>"
                " “ì·¥è Ä·¥ç ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò !"
            )


@Client.on_message(filters.command("tb", COMMAND_PREFIXES))
@authorized_users_only
async def temp_ban_user(_, message):
    is_admin = await admin_check(message)
    if not is_admin:
        return

    if len(message.command) <= 1:
        return

    user_id, user_first_name = extract_user(message)

    until_date_val = extract_time(message.command[1])
    if until_date_val is None:
        await message.reply_text(
            (
                "T ú·¥á s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö ·¥õ…™·¥ç·¥á ·¥õ è·¥ò·¥á ·¥ãs …™…¥·¥†·¥Ä ü…™·¥Ö. " " Us·¥á m, h, or d, F·¥è Ä·¥ç·¥Ä·¥õ·¥Ö ·¥õ…™·¥ç·¥á: {}"
            ).format(message.command[1][-1])
        )
        return

    try:
        await message.chat.kick_member(user_id=user_id, until_date=until_date_val)
    except Exception as error:
        await message.reply_text(str(error))
    else:
        if str(user_id).lower().startswith("@"):
            await message.reply_text(
                "‚úÖ T·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä…™ ü è B·¥Ä…¥…¥·¥á·¥Ö "
                f"{user_first_name}"
                f" for {message.command[1]}!"
            )
        else:
            await message.reply_text(
                "‚úÖ T·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä…™ ü è B·¥Ä…¥…¥·¥á·¥Ö "
                f"<a href='tg://user?id={user_id}'>"
                "“ì·¥è Ä·¥ç ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò, "
                "</a>"
                f" for {message.command[1]}!"
            )


@Client.on_message(filters.command(["ub", "um"], COMMAND_PREFIXES))
@authorized_users_only
async def un_ban_user(_, message):
    is_admin = await admin_check(message)
    if not is_admin:
        return

    user_id, user_first_name = extract_user(message)

    try:
        await message.chat.unban_member(user_id=user_id)
    except Exception as error:
        await message.reply_text(str(error))
    else:
        if str(user_id).lower().startswith("@"):
            await message.reply_text(
                "‚úÖ O·¥ã ·¥Ä·¥Ñ·¥Ñ·¥á·¥ò·¥õs·¥Ö, ·¥ús·¥á Ä "
                f"{user_first_name} c·¥Ä…¥"
                " J·¥è…™…¥ ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¢·¥Ä…™…¥!"
            )
        else:
            await message.reply_text(
                "‚úÖ O·¥ã, N·¥è·¥° "
                f"<a href='tg://user?id={user_id}'>"
                f"{user_first_name}"
                "</a> Is …¥·¥è·¥õ"
                " R·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö ·¥Ä…¢·¥Ä…™…¥!"
            )


@Client.on_message(filters.command("m", COMMAND_PREFIXES))
async def mute_user(_, message):
    is_admin = await admin_check(message)
    if not is_admin:
        return

    user_id, user_first_name = extract_user(message)

    try:
        await message.chat.restrict_member(
            user_id=user_id, permissions=ChatPermissions()
        )
    except Exception as error:
        await message.reply_text(str(error))
    else:
        if str(user_id).lower().startswith("@"):
            await message.reply_text(
                "‚úÖ O·¥ã·¥Ä è,üèª " f"{user_first_name}" " S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ç·¥ú·¥õ·¥á·¥Ö !"
            )
        else:
            await message.reply_text(
                "üèª‚úÖ O·¥ã·¥Ä è, "
                f"<a href='tg://user?id={user_id}'>"
                "now is"
                "</a>"
                " muted !"
            )


@Client.on_message(filters.command("tm", COMMAND_PREFIXES))
async def temp_mute_user(_, message):
    is_admin = await admin_check(message)
    if not is_admin:
        return

    if len(message.command) <= 1:
        return

    user_id, user_first_name = extract_user(message)

    until_date_val = extract_time(message.command[1])
    if until_date_val is None:
        await message.reply_text(
            (
                "T ú·¥á s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö ·¥õ…™·¥ç·¥á ·¥õ è·¥ò·¥á ·¥ãs …™…¥·¥†·¥Ä ü…™·¥Ö. " " Us·¥á m, h, or d, F·¥è Ä·¥ç·¥Ä·¥õ·¥Ö ·¥õ…™·¥ç·¥á: {}"
            ).format(message.command[1][-1])
        )
        return

    try:
        await message.chat.restrict_member(
            user_id=user_id, permissions=ChatPermissions(), until_date=until_date_val
        )
    except Exception as error:
        await message.reply_text(str(error))
    else:
        if str(user_id).lower().startswith("@"):
            await message.reply_text(
                "Muted for a while! "
                f"{user_first_name}"
                f" muted for {message.command[1]}!"
            )
        else:
            await message.reply_text(
                "Muted for a while! "
                f"<a href='tg://user?id={user_id}'>"
                "is"
                "</a>"
                " now "
                f" muted, for {message.command[1]}!"
            )